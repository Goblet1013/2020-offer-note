ThreadPoolExecutor
参数：
核心线程数、最大线程数、空闲线程存活时间、时间单位、阻塞工作队列、线程工厂、拒绝策略
运行规则：
不满核心线程数，没有空闲线程，则创建新线程执行任务
满了核心线程，不满工作队列，添加到工作队列
满了核心线程，不满最大线程，满了工作队列，创建新线程执行
满了最大线程数，满了工作队列，拒绝
Java提供的几种线程池：
newFixedThreadPool固定线程数，线程可重用，队列无界
newCachedThreadPool无界线程池，可重用，线程空闲存活时间为60s
newSingleThreadExecutor单个线程，失败后创建新线程
newScheduledThreadPool设置延时策略

Semaphore
信号量，多个线程共同使用同一个信号量实现多个资源的控制
semaphore.acquire()阻塞等待，获得一个semaphore
semaphore.release()释放一个semaphore

ReentrantLock
可重入、可设置为公平锁、互斥锁
trylock等待可中断
手动加锁和释放，比synchronized更自由

BlockingQueue线程安全
两把锁，一把控制入队，一把控制出队，可同时进行，
并且使用一个AtomicInteger（volatile value）表示元素个数确保线程安全
限定容量，队列满时无法加入元素
put容量已满则阻塞
offer不阻塞，不能插入返回false
take队列为空则阻塞
poll无元素返回null，有元素返回元素

CompletionService
将生产的新的任务与已完成的任务的结果进行分离
take时阻塞等待已完成的任务的结果

CountDownLatch
countDown()倒数一次
await()阻塞等待倒数到0
例如跑步比赛：
final CountDownLatch begin = new CountDownLatch(1);
final CountDownLatch end = new CountDownLatch(10);
begin.countDown()比赛开始
begin.await()等待开始
end.countDown()一位选手到达终点则减一
end.await()等待所有选手到达终点则结束比赛

CyclicBarrier循环barrier
多线程使用同一个barrier，都执行到await才可以继续执行，并且barrier可以复用再次进行await，多个线程的await次数要保证一致才可以继续
旅行团例子：步行，自驾游，团游，三者都到达某个城市之后才可以继续前往下一个城市，下一个城市再进行相互等待

Future
FutureTask实现类可以将线程执行结果返回给线程


synchronized可重入，一个同步方法种可再次调用该对象的同步方法

早期synchronized为重量级锁，之后synchronized改进，具有升级过程
无锁--new出来的适合未被使用
偏向锁--对象头的markword记录线程ID
自旋锁--CAS不断尝试获取锁，自旋10次之后升级
重量级锁